import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'
import { appConfig } from './services/config'

// üîí SECURE PWA Service Worker registrace with environment variables
if ('serviceWorker' in navigator && import.meta.env.PROD) {
  window.addEventListener('load', async () => {
    try {
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/'
      });
      
      console.log('‚úÖ Service Worker registered:', registration);
      
      // üîí SECURE: Send env variables to Service Worker
      const sendConfig = () => {
        if (navigator.serviceWorker.controller) {
          navigator.serviceWorker.controller.postMessage({
            type: 'SW_CONFIG',
            config: {
              apiBaseUrl: appConfig.api.baseUrl,
              completionWebhookUrl: appConfig.api.endpoints.completionWebhook,
              initialDataUrl: appConfig.api.endpoints.getInitialData
            }
          });
          console.log('üîí Config sent to Service Worker');
        }
      };
      
      // Send config immediately if SW is already controlling
      if (navigator.serviceWorker.controller) {
        sendConfig();
      }
      
      // Send config when SW becomes controller
      navigator.serviceWorker.addEventListener('controllerchange', sendConfig);
      
      // Update handler
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        if (newWorker) {
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              console.log('üîÑ New Service Worker available');
              // Send config to new SW
              sendConfig();
            }
          });
        }
      });
      
    } catch (error) {
      console.error('‚ùå Service Worker registration failed:', error);
    }
  });
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

// DEBUG: Vystavit funkce pro testov√°n√≠ v konzoli (pouze v dev mode)
if (import.meta.env.DEV) {
  const exposeDebugFunctions = async () => {
    const { useAppStore } = await import('./store');
    const { storageService } = await import('./services/storage');
    
    (window as any).debugApp = {
      // Reset IndexedDB pro testov√°n√≠ prvn√≠ inicializace
      resetDB: () => {
        console.log('üßπ Resetuji IndexedDB...');
        console.log('DEBUG: resetIndexedDB not available');
      },
      
      // Force API refresh (ignoruje cache)
      forceRefresh: () => {
        console.log('üîÑ FORCE: Naƒç√≠t√°m fresh data z API...');
        return useAppStore.getState().initializeCacheFirst();
      },
      
      // Debug info o lok√°ln√≠ datab√°zi
      getDebugInfo: async () => {
        const debugInfo = await storageService.getLocalFirstDebugInfo();
        console.table(debugInfo);
        return debugInfo;
      },
      
      // Zobraz v≈°echny zamƒõstnance v lok√°ln√≠ datab√°zi
      showEmployees: () => {
        const { localEmployees } = useAppStore.getState();
        console.log('üë• Lok√°ln√≠ zamƒõstnanci:');
        if (localEmployees.size === 0) {
          console.log('üì≠ ≈Ω√°dn√≠ zamƒõstnanci v lok√°ln√≠ datab√°zi');
          return [];
        }
        localEmployees.forEach((state, id) => {
          console.log(`${state.fullName} (${id}): ${state.isAtWork ? 'üü¢ v pr√°ci' : 'üî¥ voln√Ω'}`);
        });
        return Array.from(localEmployees.values());
      },
      
      // Spus≈• prvn√≠ sync
      firstSync: () => {
        console.log('üîÑ Spou≈°t√≠m prvn√≠ sync...');
        return useAppStore.getState().syncWithAPI();
      },
      
      // Zpracuj action queue manu√°lnƒõ
      processQueue: () => {
        console.log('‚ö° Manu√°lnƒõ spou≈°t√≠m zpracov√°n√≠ action queue...');
        return useAppStore.getState().processActionQueue();
      },
      
      // Vyƒçisti action queue
      clearQueue: () => {
        console.log('üóëÔ∏è DEBUG: clearQueue not available');
      },
      
      // Zobraz aktu√°ln√≠ frontu
      showQueue: () => {
        console.log(`üìã DEBUG: showQueue not available`);
        return { queue: [], isProcessing: false };
      },
      
      // Force unlock processing (emergency)
      forceUnlock: () => {
        console.log('üîì DEBUG: forceUnlock not available');
      },
      
      // Info o posledn√≠m sync
      getLastSync: () => {
        const { lastSync } = useAppStore.getState();
        const lastSyncDate = lastSync ? new Date(lastSync) : null;
        console.log('üìÖ Posledn√≠ sync:', lastSyncDate?.toLocaleString('cs-CZ') || 'Nikdy');
        const timeSinceSync = lastSyncDate ? (Date.now() - lastSyncDate.getTime()) / 1000 : null;
        console.log('‚è±Ô∏è ƒåas od posledn√≠ho sync:', timeSinceSync ? `${Math.round(timeSinceSync)}s` : 'N/A');
        return { lastSync, timeSinceSync };
      },
      
      // Test background sync timing
      testBackgroundSync: async () => {
        console.log('‚è≥ Testuji background sync...');
        const start = Date.now();
        try {
          await useAppStore.getState().syncWithAPI();
          console.log(`‚úÖ Background sync dokonƒçen za ${(Date.now() - start) / 1000}s`);
        } catch (error) {
          console.log(`‚ùå Background sync selhal za ${(Date.now() - start) / 1000}s:`, error);
        }
      },
      
      // Testov√°n√≠ offline/online stav≈Ø
      goOffline: () => {
        console.log('üìµ Simuluji offline stav...');
        useAppStore.getState().setOnline(false);
        window.dispatchEvent(new Event('offline'));
      },
      
      goOnline: () => {
        console.log('üåê Simuluji online stav...');
        useAppStore.getState().setOnline(true);
        window.dispatchEvent(new Event('online'));
      },
      
      // Zobraz frontu akc√≠ (duplicate function fixed)
      showQueueDetailed: async () => {
        const { localEmployees } = useAppStore.getState();
        console.log(`üìã DEBUG: showQueueDetailed - employees: ${localEmployees.size}`);
      },
      
      // Test refresh persistence
      testRefreshPersistence: async () => {
        const { localEmployees } = useAppStore.getState();
        
        console.log('üß™ TEST: Aktu√°ln√≠ lok√°ln√≠ stavy p≈ôed refresh:');
        Array.from(localEmployees.values()).forEach(emp => {
          if (emp.isAtWork) {
            console.log(`üë§ ${emp.fullName}: V PR√ÅCI (${emp.attendanceStart ? new Date(emp.attendanceStart).toLocaleTimeString('cs-CZ') : 'bez ƒçasu'})`);
          }
        });
        
        console.log(`üìã Action queue: DEBUG mode`);
        
        console.log('üîÑ Proveƒète refresh str√°nky a zkontrolujte, zda se stav zachov√°!');
      },
      
      // Trigger background sync p≈ôes Service Worker
      triggerBackgroundSync: () => {
        if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
          navigator.serviceWorker.ready.then(registration => {
            console.log('üîÑ Registruji background sync...');
            return (registration as any).sync.register('attendance-actions');
          }).then(() => {
            console.log('‚úÖ Background sync registrov√°n');
          }).catch(error => {
            console.error('‚ùå Background sync failed:', error);
          });
        } else {
          console.warn('‚ö†Ô∏è Background sync nen√≠ podporov√°n');
        }
      }
    };
    
  console.log('üîß DEBUG funkce dostupn√© v konzoli jako window.debugApp:');
  console.log('‚Ä¢ debugApp.resetDB() - resetuje IndexedDB pro test prvn√≠ spu≈°tƒõn√≠');
  console.log('‚Ä¢ debugApp.forceRefresh() - üîÑ FORCE refresh aplikace');
  console.log('‚Ä¢ debugApp.getDebugInfo() - info o lok√°ln√≠ datab√°zi');
  console.log('‚Ä¢ debugApp.showEmployees() - zobraz√≠ v≈°echny zamƒõstnance');
  console.log('‚Ä¢ debugApp.firstSync() - spust√≠ FULL sync s API');
  console.log('‚Ä¢ debugApp.getLastSync() - info o posledn√≠m sync');
  console.log('‚Ä¢ debugApp.testBackgroundSync() - test background sync timing');
  console.log('‚Ä¢ debugApp.processQueue() - ‚ö° ZPRACUJE ACTION QUEUE!');
  console.log('‚Ä¢ debugApp.showQueue() - zobraz√≠ aktu√°ln√≠ frontu');
  console.log('‚Ä¢ debugApp.clearQueue() - vyƒçist√≠ action queue');
  console.log('‚Ä¢ debugApp.forceUnlock() - üîì emergency unlock processing');
  console.log('‚Ä¢ debugApp.triggerBackgroundSync() - spust√≠ Service Worker background sync');
  };
  
  // Poƒçkej na load a pak vystavit debug funkce
  setTimeout(exposeDebugFunctions, 1000);
}
