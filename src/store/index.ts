import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';
import type { 
  EmployeeWithState, 
  Screen, 
  QueuedAction,
  Activity
} from '../types';
import { storageService, type LocalEmployeeState } from '../services/storage';

// LOCAL-FIRST Store interface
interface AppStore {
  // üè† LOCAL-FIRST STATE (prim√°rn√≠ zdroj pravdy)
  localEmployees: Map<string, LocalEmployeeState>; // EmployeeID -> LocalState
  activities: Activity[]; // NOV√Å property pro aktivity
  
  // üì± UI State
  currentScreen: Screen;
  selectedEmployee?: EmployeeWithState;
  selectedCategory?: string; // NOV√Å property pro vybranou kategorii
  selectedActivity?: Activity; // NOV√Å property pro vybranou aktivitu
  message?: string;
  
  // üåê Network & Sync State
  isOnline: boolean;
  isLoading: boolean;
  error?: string;
  lastSync?: string;
  isInitialized: boolean; // Zda je LOCAL datab√°ze naƒçten√°
  
  // =============================================================================
  // üöÄ LOCAL-FIRST CORE METHODS
  // =============================================================================
  
  // Inicializace - Cache-first s background API update
  initializeCacheFirst: () => Promise<void>;
  
  // Rychl√Ω lok√°ln√≠ lookup (bez API vol√°n√≠!)
  getEmployeeState: (employeeID: string) => LocalEmployeeState | null;
  getEmployeeWithState: (employeeID: string) => EmployeeWithState | null;
  
  // Lok√°ln√≠ akce (okam≈æit√©, bez API)
  updateEmployeeStateLocal: (employeeID: string, updates: Partial<LocalEmployeeState>) => Promise<void>;
  addEmployeeStateLocal: (employee: LocalEmployeeState) => Promise<void>;
  
  // =============================================================================
  // üì± UI STATE MANAGEMENT
  // =============================================================================
  
  setCurrentScreen: (currentScreen: Screen) => void;
  setSelectedEmployee: (selectedEmployee: EmployeeWithState | undefined) => void;
  setSelectedCategory: (category: string | undefined) => void; // NOV√Å metoda
  setSelectedActivity: (activity: Activity | undefined) => void; // NOV√Å metoda
  setMessage: (message: string | undefined) => void;
  
  // =============================================================================
  // üåê NETWORK & SYNC
  // =============================================================================
  
  setOnline: (isOnline: boolean) => void;
  setLoading: (isLoading: boolean) => void;
  setError: (error: string | undefined) => void;
  
  // Background sync s API (neblokuj√≠c√≠)
  syncWithAPI: () => Promise<void>;
  
  // Zpracov√°n√≠ action queue
  processActionQueue: () => Promise<void>;
  
  // =============================================================================
  // ‚ö° EMPLOYEE ACTIONS (LOCAL-FIRST)
  // =============================================================================
  
  // Okam≈æit√© lok√°ln√≠ akce (0ms response time)
  startWork: (employeeID: string) => Promise<void>;
  stopWork: (employeeID: string, activityID?: string) => Promise<void>; // UPRAVEN√Å metoda s activityID
}

interface ActionQueueStore {
  queue: QueuedAction[];
  isLoaded: boolean;
  isProcessing: boolean; // NOV√Å property - processing lock
  
  addAction: (action: Omit<QueuedAction, 'id' | 'attempts'>) => Promise<void>;
  removeAction: (actionId: string) => Promise<void>;
  updateActionAttempts: (actionId: string, attempts: number) => Promise<void>;
  loadQueue: () => Promise<void>;
  getFailedActions: () => QueuedAction[];
  clearQueue: () => Promise<void>;
}

// Hlavn√≠ store
export const useAppStore = create<AppStore>()(
  subscribeWithSelector((set, get) => ({
    // =============================================================================
    // üè† LOCAL-FIRST STATE (prim√°rn√≠ zdroj pravdy) 
    // =============================================================================
    localEmployees: new Map<string, LocalEmployeeState>(),
    activities: [], // NOV√Å property pro aktivity
    
    // üì± UI State
    currentScreen: 'welcome' as Screen,
    selectedEmployee: undefined,
    selectedCategory: undefined, // NOV√Å property
    selectedActivity: undefined, // NOV√Å property
    message: undefined,
    
    // üåê Network & Sync State
    isOnline: navigator.onLine,
    isLoading: false,
    error: undefined,
    lastSync: undefined,
    isInitialized: false,
    
    // =============================================================================
    // üöÄ LOCAL-FIRST CORE METHODS
    // =============================================================================
    
    // Inicializace - Cache-first s background API update
    initializeCacheFirst: async () => {
      console.log('‚ö° Inicializace CACHE-FIRST store...');
      set({ isLoading: true, error: undefined });
      
      try {
        // 1. OKAM≈ΩITƒö naƒçti cache data z IndexedDB (0ms)
        const employeeStates = await storageService.getAllEmployeeStates();
        
        if (employeeStates.length === 0) {
          console.log('üì• ≈Ω√°dn√° cache data - MUS√çM poƒçkat na API (prvn√≠ spu≈°tƒõn√≠)...');
          
          if (!get().isOnline) {
            set({ error: 'Aplikace vy≈æaduje internetov√© p≈ôipojen√≠ p≈ôi prvn√≠m spu≈°tƒõn√≠' });
            return;
          }
          
          // Prvn√≠ spu≈°tƒõn√≠ - mus√≠me poƒçkat na API
          const { apiService } = await import('../services/api');
          const apiData = await apiService.getInitialData();
          
          const newLocalStates: LocalEmployeeState[] = [];
          for (const employee of apiData.employees) {
            if (!employee.fullName?.trim()) continue;
            
            newLocalStates.push({
              employeeID: employee.employeeID,
              fullName: employee.fullName,
              reportActivity: employee.reportActivity || false,
              department: '',
              isAtWork: false,
              version: 1
            });
          }
          
          await storageService.saveAllEmployeeStates(newLocalStates);
          await storageService.saveMetadata('cachedActivities', JSON.stringify(apiData.activities || []));
          
          const localMap = new Map<string, LocalEmployeeState>();
          newLocalStates.forEach(state => localMap.set(state.employeeID, state));
          
          set({ 
            localEmployees: localMap,
            activities: apiData.activities || [],
            isInitialized: true,
            lastSync: new Date().toISOString()
          });
          
          await storageService.saveMetadata('lastFullSync', new Date().toISOString());
          console.log(`‚úÖ Prvn√≠ inicializace dokonƒçena: ${newLocalStates.length} zamƒõstnanc≈Ø`);
          
        } else {
          // 2. OKAM≈ΩITƒö spustit aplikaci s cache daty (0ms delay)
          const localMap = new Map<string, LocalEmployeeState>();
          employeeStates.forEach(state => localMap.set(state.employeeID, state));
          
          // Naƒçti cached activities
          const cachedActivities = await storageService.getMetadata('cachedActivities');
          const activities = cachedActivities ? JSON.parse(cachedActivities) : [];
          
          set({ 
            localEmployees: localMap,
            activities: activities,
            isInitialized: true,
            lastSync: await storageService.getMetadata('lastFullSync')
          });
          
          console.log(`‚ö° Aplikace spu≈°tƒõna OKAM≈ΩITƒö s cache: ${employeeStates.length} zamƒõstnanc≈Ø, ${activities.length} aktivit`);
          
          // 3. NA POZAD√ç spustit API sync pro aktualizaci
          // 3. BEZPEƒåN√ù background sync - aktualizuje jen metadata
          if (get().isOnline) {
            console.log('üîÑ Spou≈°t√≠m BEZPEƒåN√ù background sync (jen metadata)...');
            // Neblokuj√≠c√≠ background sync - jen jm√©na a reportActivity
            get().syncWithAPI().then(() => {
              console.log('‚úÖ Background metadata sync dokonƒçen');
            }).catch(error => {
              console.warn('‚ö†Ô∏è Background sync selhal:', error);
            });
          }
        }
        
        // 4. V≈ΩDY naƒçti action queue
        const queueStore = useActionQueueStore.getState();
        await queueStore.loadQueue();
        console.log(`üìã Action queue naƒçtena`);
        
      } catch (error) {
        console.error('‚ùå Chyba p≈ôi CACHE-FIRST inicializaci:', error);
        set({ error: error instanceof Error ? error.message : 'Kritick√° chyba p≈ôi inicializaci' });
      } finally {
        set({ isLoading: false });
      }
    },
    
    // Rychl√Ω lok√°ln√≠ lookup (bez API vol√°n√≠!)
    getEmployeeState: (employeeID: string) => {
      return get().localEmployees.get(employeeID) || null;
    },
    
    // Konverze LocalEmployeeState ‚Üí EmployeeWithState pro UI
    getEmployeeWithState: (employeeID: string) => {
      const localState = get().localEmployees.get(employeeID);
      if (!localState) return null;
      
        return {
        employeeID: localState.employeeID,
        fullName: localState.fullName,
        reportActivity: localState.reportActivity, // NOV√Å property
        isAtWork: localState.isAtWork,
        lastAction: localState.lastLocalAction,
        lastActionTime: localState.lastLocalActionTime,
        attendanceStart: localState.attendanceStart,
        attendanceID: localState.attendanceID,
        version: localState.version
      };
    },
    
    // Lok√°ln√≠ aktualizace stavu (okam≈æit√°, + persist do IndexedDB)
    updateEmployeeStateLocal: async (employeeID: string, updates: Partial<LocalEmployeeState>) => {
      const currentState = get().localEmployees.get(employeeID);
      if (!currentState) {
        console.warn('‚ö†Ô∏è Nelze aktualizovat neexistuj√≠c√≠ho zamƒõstnance:', employeeID);
        return;
      }
      
      const updatedState: LocalEmployeeState = {
        ...currentState,
        ...updates,
        lastLocalActionTime: new Date().toISOString(),
        version: (currentState.version || 0) + 1
      };
      
      // Aktualizuj Map v pamƒõti
      const newMap = new Map(get().localEmployees);
      newMap.set(employeeID, updatedState);
      set({ localEmployees: newMap });
      
      // Persist do IndexedDB
      await storageService.saveEmployeeState(updatedState);
      
      console.log(`üíæ Stav zamƒõstnance aktualizov√°n lok√°lnƒõ: ${updatedState.fullName} (${updatedState.isAtWork ? 'v pr√°ci' : 'voln√Ω'})`);
    },
    
    // P≈ôidat nov√©ho zamƒõstnance lok√°lnƒõ
    addEmployeeStateLocal: async (employee: LocalEmployeeState) => {
      const existingState = get().localEmployees.get(employee.employeeID);
      if (existingState) {
        console.warn('‚ö†Ô∏è Zamƒõstnanec u≈æ existuje, pou≈æijte updateEmployeeStateLocal:', employee.employeeID);
        return;
      }
      
      // P≈ôidej do Map v pamƒõti
      const newMap = new Map(get().localEmployees);
      newMap.set(employee.employeeID, employee);
      set({ localEmployees: newMap });
      
      // Persist do IndexedDB
      await storageService.saveEmployeeState(employee);
      
      console.log(`‚ûï Nov√Ω zamƒõstnanec p≈ôid√°n lok√°lnƒõ: ${employee.fullName}`);
    },
    
    // =============================================================================
    // üì± UI STATE MANAGEMENT  
    // =============================================================================
    
    setCurrentScreen: (currentScreen: Screen) => set({ currentScreen }),
    setSelectedEmployee: (selectedEmployee: EmployeeWithState | undefined) => set({ selectedEmployee }),
    setSelectedCategory: (selectedCategory: string | undefined) => set({ selectedCategory }), // NOV√Å metoda
    setSelectedActivity: (selectedActivity: Activity | undefined) => set({ selectedActivity }), // NOV√Å metoda
    setMessage: (message: string | undefined) => set({ message }),
    
    // =============================================================================
    // üåê NETWORK & SYNC
    // =============================================================================
    
    setOnline: (isOnline: boolean) => set({ isOnline }),
    setLoading: (isLoading: boolean) => set({ isLoading }),
    setError: (error: string | undefined) => set({ error }),
    
    // DEBUG: Reset IndexedDB pro testov√°n√≠ prvn√≠ inicializace
    resetIndexedDB: async () => {
      console.log('üßπ DEBUG: Resetov√°n√≠ IndexedDB...');
      set({ isLoading: true });
      
      try {
        // Vyƒçistit v≈°echna data
        await storageService.clearAllLocalData();
        
        // Vyƒçistit action queue
        await storageService.clearActions();
        
        // Reset store state
        set({ 
          localEmployees: new Map<string, LocalEmployeeState>(),
          activities: [],
          isInitialized: false,
          lastSync: undefined,
          error: undefined
        });
        
        // Reset action queue store
        useActionQueueStore.setState({ 
          queue: [], 
          isLoaded: false, 
          isProcessing: false 
        });
        
        console.log('‚úÖ IndexedDB vyƒçi≈°tƒõna - aplikace je p≈ôipravena pro API-FIRST test');
        console.log('üîÑ Obnovte str√°nku pro test API-FIRST inicializace');
        
      } catch (error) {
        console.error('‚ùå Chyba p≈ôi resetov√°n√≠ IndexedDB:', error);
        set({ error: 'Chyba p≈ôi resetov√°n√≠ datab√°ze' });
      } finally {
        set({ isLoading: false });
      }
    },

    // Zpracov√°n√≠ action queue - odes√≠l√°n√≠ ƒçekaj√≠c√≠ch akc√≠ na API
    processActionQueue: async () => {
      if (!get().isOnline) {
        console.log('üì¥ ProcessActionQueue p≈ôeskoƒçen - offline');
        return;
      }
      
      const queueStore = useActionQueueStore.getState();
      
      // KRITICK√â: Processing lock - zabr√°nit duplicitn√≠mu zpracov√°n√≠
      if (queueStore.isProcessing) {
        console.log('üîí ProcessActionQueue p≈ôeskoƒçen - u≈æ bƒõ≈æ√≠ zpracov√°n√≠');
        return;
      }
      
      const { queue, removeAction, updateActionAttempts } = queueStore;
      
      if (queue.length === 0) {
        console.log('üì≠ Action queue je pr√°zdn√°');
        return;
      }
      
      // Nastavit processing lock
      useActionQueueStore.setState({ isProcessing: true });
      
      console.log(`üîÑ Zpracov√°v√°m ${queue.length} akc√≠ ve frontƒõ...`);
      
      // NOV√â: Skupina akc√≠ podle zamƒõstnanc≈Ø pro spr√°vn√© dependency tracking
      const employeeActionsMap = new Map<string, QueuedAction[]>();
      
      // Seskup akce podle employeeID a se≈ôa≈• chronologicky
      queue.forEach(action => {
        if (!employeeActionsMap.has(action.employeeID)) {
          employeeActionsMap.set(action.employeeID, []);
        }
        employeeActionsMap.get(action.employeeID)!.push(action);
      });
      
      // Se≈ôaƒè akce v ka≈æd√© skupinƒõ podle timestamp
      for (const [employeeID, actions] of employeeActionsMap) {
        actions.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
        console.log(`üë§ ${get().localEmployees.get(employeeID)?.fullName}: ${actions.length} akc√≠ se≈ôazeno chronologicky`);
      }
      
      // Zpracuj akce POSTUPNƒö pro ka≈æd√©ho zamƒõstnance
      for (const [, actions] of employeeActionsMap) { // Pou≈æiji _ m√≠sto employeeID
        let currentAttendanceID: string | undefined = undefined;
        
        for (const action of actions) {
          // Skipnout akce, kter√© p≈ôekroƒçily max attempts
          if (action.attempts >= action.maxAttempts) {
            console.warn('‚ö†Ô∏è Akce p≈ôekroƒçila max attempts, odstra≈àuji:', action.id);
            await removeAction(action.id);
            continue;
          }
          
          // P≈ôiprav data pro logov√°n√≠
          const employee = get().localEmployees.get(action.employeeID);
          const employeeName = employee?.fullName || `Nezn√°m√Ω (${action.employeeID})`;
          const actionText = action.action === 'start' ? '[START] P≈ò√çCHOD' : '[STOP] ODCHOD';
          
          // DEPENDENCY TRACKING: Pro STOP akce bez attendanceID pou≈æij currentAttendanceID z p≈ôedchoz√≠ START
          let effectiveAttendanceID = action.attendanceID;
          let effectiveAttendanceStart = action.attendanceStart;
          
          if (action.action === 'stop' && !effectiveAttendanceID && currentAttendanceID) {
            effectiveAttendanceID = currentAttendanceID;
            console.log(`üîó STOP akce pou≈æ√≠v√° attendanceID z p≈ôedchoz√≠ START v t√©to sekvenci: ${currentAttendanceID}`);
          }
          
          try {
            console.log(`üì§ Zpracov√°v√°m: ${actionText} - ${employeeName}`, {
              pokus: `${action.attempts + 1}/${action.maxAttempts}`,
              ƒças: new Date(action.timestamp).toLocaleTimeString('cs-CZ'),
              activityID: action.activityID || 'bez aktivity',
              originalAttendanceID: action.attendanceID || 'undefined',
              effectiveAttendanceID: effectiveAttendanceID || 'undefined',
              willCreateNew: action.action === 'start' || (!effectiveAttendanceID)
            });
            
            // Zv√Ω≈°it poƒçet pokus≈Ø P≈òED vol√°n√≠m API
            await updateActionAttempts(action.id, action.attempts + 1);
            
            // Volej API se spr√°vnou logikou CREATE/UPDATE
            const { apiService } = await import('../services/api');
            const result = await apiService.logAttendanceAction({
              employeeID: action.employeeID,
              action: action.action,
              timestamp: action.timestamp,
              attendanceID: effectiveAttendanceID, // POU≈ΩIJ EFFECTIVE ID
              attendanceStart: effectiveAttendanceStart,
              activityID: action.activityID
            });
            
            console.log(`‚úÖ ${actionText} √∫spƒõ≈°nƒõ zpracov√°n - ${employeeName}`, { 
              attendanceID: result.attendanceID 
            });
            
            // √öspƒõch - odstranit z fronty
            await removeAction(action.id);
            
            // DEPENDENCY TRACKING: Ulo≈æit attendanceID pro n√°sleduj√≠c√≠ STOP akce
            if (action.action === 'start' && result.attendanceID) {
              currentAttendanceID = result.attendanceID;
              console.log('üîó START dokonƒçen - attendanceID k dispozici pro n√°sleduj√≠c√≠ STOP:', result.attendanceID);
              
              // Aktualizuj i lok√°ln√≠ stav
              await get().updateEmployeeStateLocal(action.employeeID, {
                attendanceID: result.attendanceID
              });
              
              // KRITICK√â: Aktualizuj i selectedEmployee pokud je to ten sam√Ω
              const currentSelected = get().selectedEmployee;
              if (currentSelected?.employeeID === action.employeeID) {
                const updatedEmployee = get().getEmployeeWithState(action.employeeID);
                if (updatedEmployee) {
                  set({ selectedEmployee: updatedEmployee });
                }
              }
            } else if (action.action === 'stop') {
              // STOP akce dokonƒçena - reset currentAttendanceID pro novou sekvenci
              currentAttendanceID = undefined;
              console.log('üî¥ STOP dokonƒçen - reset attendanceID pro novou sekvenci');
            }
            
          } catch (error) {
            console.error(`‚ùå Chyba p≈ôi zpracov√°n√≠ ${actionText} - ${employeeName}:`, error);
            
            // Detekce s√≠≈•ov√© chyby
            const isNetworkError = error instanceof Error && (
              error.message.includes('Failed to fetch') ||
              error.message.includes('Network') ||
              error.message.includes('ERR_INTERNET_DISCONNECTED') ||
              error.message.includes('ERR_NETWORK_CHANGED')
            );
            
            if (isNetworkError) {
              console.warn('üìµ Detekov√°na s√≠≈•ov√° chyba - p≈ôeru≈°uji zpracov√°n√≠ fronty');
              set({ isOnline: false }); // Aktualizuj online stav
              
              // Uvolnir processing lock p≈ôi s√≠≈•ov√© chybƒõ
              useActionQueueStore.setState({ isProcessing: false });
              return; // Ukonƒçit cel√© zpracov√°n√≠ pro v≈°echny zamƒõstnance
            }
            
            // Akce z≈Øst√°v√° ve frontƒõ pro dal≈°√≠ pokus
            // attempts u≈æ bylo zv√Ω≈°eno v√Ω≈°e
            
            // Pokud p≈ôekroƒçila max attempts, odstra≈à ji
            if (action.attempts >= action.maxAttempts) {
              console.warn('‚ö†Ô∏è Akce p≈ôekroƒçila max attempts po chybƒõ, odstra≈àuji:', action.id);
              await removeAction(action.id);
            }
          }
        } // konec for (actions for this employee)
      } // konec for (all employees)
      
      const remainingActions = useActionQueueStore.getState().queue.length;
      console.log(`‚úÖ Zpracov√°n√≠ action queue dokonƒçeno. Zb√Ωv√° ${remainingActions} akc√≠.`);
      
      // Uvolnit processing lock
      useActionQueueStore.setState({ isProcessing: false });
    },

    // FULL sync s API - aktualizuje v≈°echna data
    syncWithAPI: async () => {
      if (!get().isOnline) {
        console.log('üì¥ Sync p≈ôeskoƒçen - offline');
        return;
      }
      
      console.log('üîÑ Spou≈°t√≠m FULL sync s API...');
      
      try {
        const { apiService } = await import('../services/api');
        
        // 1. Z√≠skej aktu√°ln√≠ data z API
        const apiData = await apiService.getInitialData();
        console.log(`üì° API sync: ${apiData.employees?.length} zamƒõstnanc≈Ø, ${apiData.activities?.length} aktivit`);
        
        // 2. AKTUALIZUJ JEN METADATA zamƒõstnanc≈Ø (NIKDY ne pracovn√≠ stavy!)
        const currentEmployees = get().localEmployees;
        let hasChanges = false;
        
        for (const employee of apiData.employees) {
          if (!employee.fullName || employee.fullName.trim() === '') {
            console.warn('‚ö†Ô∏è Skipuji zamƒõstnance s pr√°zdn√Ωm jm√©nem:', employee);
            continue;
          }
          
          const existingState = currentEmployees.get(employee.employeeID);
          
          if (!existingState) {
            // Nov√Ω zamƒõstnanec - p≈ôidej s defaultn√≠m stavem
            const newState: LocalEmployeeState = {
              employeeID: employee.employeeID,
              fullName: employee.fullName,
              reportActivity: employee.reportActivity || false,
              department: '',
              isAtWork: false, // Default pro nov√©
              version: 1
            };
            
            await get().addEmployeeStateLocal(newState);
            console.log(`‚ûï P≈ôid√°n nov√Ω zamƒõstnanec: ${employee.fullName}`);
            hasChanges = true;
            
          } else {
            // Existuj√≠c√≠ zamƒõstnanec - aktualizuj JEN metadata
            const needsUpdate = 
              existingState.fullName !== employee.fullName ||
              existingState.reportActivity !== (employee.reportActivity || false);
              
            if (needsUpdate) {
              await get().updateEmployeeStateLocal(employee.employeeID, {
                fullName: employee.fullName,
                reportActivity: employee.reportActivity || false
                // NIKDY nemƒõnit: isAtWork, attendanceStart, attendanceID!
              });
              console.log(`üîÑ Aktualizov√°na metadata pro: ${employee.fullName}`);
              hasChanges = true;
            }
          }
        }
        
        // 3. DETEKCE ODSTRANƒöN√ùCH zamƒõstnanc≈Ø
        const apiEmployeeIds = new Set(apiData.employees.map(e => e.employeeID));
        const currentEmployeeIds = Array.from(currentEmployees.keys());
        const removedEmployees = currentEmployeeIds.filter(id => !apiEmployeeIds.has(id));
        
        if (removedEmployees.length > 0) {
          console.log(`üóëÔ∏è Detekov√°no ${removedEmployees.length} odstranƒõn√Ωch zamƒõstnanc≈Ø z API`);
          removedEmployees.forEach(employeeID => {
            const employee = currentEmployees.get(employeeID);
            console.log(`‚ùå Odstranƒõn zamƒõstnanec: ${employee?.fullName} (${employeeID})`);
          });
        }
        
        // 3. Cache activities pro offline fallback
        await storageService.saveMetadata('cachedActivities', JSON.stringify(apiData.activities || []));
        
        // 4. Aktualizuj jen activities v store (nikdy localEmployees!)
        set({ 
          activities: apiData.activities || []
        });
        
        // 5. Aktualizuj sync metadata
        const syncTime = new Date().toISOString();
        await storageService.saveMetadata('lastFullSync', syncTime);
        set({ lastSync: syncTime });
        
        // 6. Debug info o zmƒõn√°ch
        const currentEmployeesAfterSync = get().localEmployees;
        const totalEmployees = currentEmployeesAfterSync.size;
        const atWork = Array.from(currentEmployeesAfterSync.values()).filter(e => e.isAtWork).length;
        
        console.log(`‚úÖ BEZPEƒåN√ù sync dokonƒçen:`, {
          totalEmployees,
          atWork,
          hasChanges,
          activities: (apiData.activities || []).length
        });
        
        if (hasChanges) {
          console.log('üîÑ UI se aktualizuje s nov√Ωmi daty...');
        } else {
          console.log('üìä ≈Ω√°dn√© zmƒõny - UI z≈Øst√°v√° stejn√©');
        }
        
      } catch (error) {
        console.error('‚ùå Chyba p≈ôi FULL sync:', error);
        // P≈ôi chybƒõ nestav√≠me error do UI - je to background proces
        console.log('üíæ Pokraƒçuji s cached daty...');
      }
    },
    
    // =============================================================================
    // ‚ö° EMPLOYEE ACTIONS (LOCAL-FIRST)
    // =============================================================================
    
    // Okam≈æit√° lok√°ln√≠ START akce (0ms response time)
    startWork: async (employeeID: string) => {
      const localState = get().getEmployeeState(employeeID);
      
      if (!localState) {
        console.warn('‚ö†Ô∏è Nelze spustit pr√°ci - zamƒõstnanec nen√≠ v lok√°ln√≠ datab√°zi:', employeeID);
        return;
      }
      
      if (localState.isAtWork) {
        console.warn('‚ö†Ô∏è Zamƒõstnanec u≈æ je v pr√°ci:', localState.fullName);
        return;
      }
      
      const startTimestamp = new Date().toISOString();
      
      console.log('üü¢ LOCAL-FIRST START pro:', localState.fullName);
      
      // NEJD≈ò√çV: Okam≈æit√° lok√°ln√≠ aktualizace (0ms)
      await get().updateEmployeeStateLocal(employeeID, {
                isAtWork: true, 
        lastLocalAction: 'start',
        attendanceStart: startTimestamp,
        attendanceID: undefined // Bude doplnƒõno po API response
      });
      
      // Aktualizuj UI pokud je tento zamƒõstnanec vybran√Ω
      const currentSelected = get().selectedEmployee;
      if (currentSelected?.employeeID === employeeID) {
        const updatedEmployee = get().getEmployeeWithState(employeeID);
        if (updatedEmployee) {
          set({ selectedEmployee: updatedEmployee });
        }
      }
      
      // POTOM: Na pozad√≠ queue + API (neblokuj√≠c√≠)
      try {
        await useActionQueueStore.getState().addAction({
        employeeID,
        action: 'start',
          timestamp: startTimestamp,
        maxAttempts: 3
      });
      
        // Action queue se zpracuje automaticky v useAppSync useEffect
        
      } catch (error) {
        console.error('‚ùå Chyba p≈ôi START action queue:', error);
        // Lok√°ln√≠ aktualizace probƒõhla - to je hlavn√≠
      }
    },
    
    // Okam≈æit√° lok√°ln√≠ STOP akce (0ms response time)
    stopWork: async (employeeID: string, activityID?: string) => {
      const localState = get().getEmployeeState(employeeID);
      
      if (!localState) {
        console.warn('‚ö†Ô∏è Nelze ukonƒçit pr√°ci - zamƒõstnanec nen√≠ v lok√°ln√≠ datab√°zi:', employeeID);
        return;
      }
      
      if (!localState.isAtWork) {
        console.warn('‚ö†Ô∏è Zamƒõstnanec nen√≠ v pr√°ci:', localState.fullName);
        return;
      }
      
      const stopTimestamp = new Date().toISOString();
      
      // KL√çƒåOV√â: Ulo≈æit attendanceID a attendanceStart P≈òED resetov√°n√≠m
      const savedAttendanceID = localState.attendanceID;
      const savedAttendanceStart = localState.attendanceStart;
      
      console.log('üî¥ STOP akce pro:', localState.fullName, {
        activityID: activityID || 'bez aktivity',
        attendanceID: savedAttendanceID,
        attendanceStart: savedAttendanceStart
      });
      
      // NEJD≈ò√çV: P≈ôidat do queue S P≈ÆVODN√çMI HODNOTAMI
      await useActionQueueStore.getState().addAction({
        employeeID,
        action: 'stop',
        timestamp: stopTimestamp,
        maxAttempts: 3,
        attendanceID: savedAttendanceID, // POU≈Ω√çV√ÅME ULO≈ΩEN√â HODNOTY
        attendanceStart: savedAttendanceStart,
        activityID: activityID
      });
      
      // POTOM: Lok√°ln√≠ aktualizace (resetov√°n√≠)
      await get().updateEmployeeStateLocal(employeeID, {
        isAtWork: false, 
        lastLocalAction: 'stop',
        attendanceStart: undefined, // Resetovat pro p≈ô√≠≈°t√≠ START
        attendanceID: undefined // Resetovat
      });
      
      // Aktualizuj UI pokud je tento zamƒõstnanec vybran√Ω
      const currentSelected = get().selectedEmployee;
      if (currentSelected?.employeeID === employeeID) {
        const updatedEmployee = get().getEmployeeWithState(employeeID);
        if (updatedEmployee) {
          set({ selectedEmployee: updatedEmployee });
        }
      }
      
      console.log('‚úÖ STOP akce dokonƒçena - data odesl√°na do fronty');
    },
  }))
);

// Action Queue Store
export const useActionQueueStore = create<ActionQueueStore>()(
  subscribeWithSelector((set, get) => ({
  queue: [],
  isLoaded: false,
  isProcessing: false, // NOV√Å property - processing lock
  
    addAction: async (action: Omit<QueuedAction, 'id' | 'attempts'>) => {
    const newAction: QueuedAction = {
      ...action,
        id: `${action.employeeID}-${action.action}-${Date.now()}`,
      attempts: 0
    };
    
      // P≈ôidat do lok√°ln√≠ho stavu
      set(state => ({
        queue: [...state.queue, newAction]
      }));
      
      // Ulo≈æit do IndexedDB
      await storageService.saveAction(newAction);
      
      console.log('üì§ Akce p≈ôid√°na do fronty:', action.action, action.activityID ? `s aktivitou ${action.activityID}` : 'bez aktivity');
    },
    
    removeAction: async (actionId: string) => {
      // Odebrat z lok√°ln√≠ho stavu
      set(state => ({
        queue: state.queue.filter(action => action.id !== actionId)
      }));
  
      // Odebrat z IndexedDB - opraven√© n√°zvy metod
      await storageService.removeAction(actionId);
      
      console.log('‚úÖ Akce odebr√°na z fronty:', actionId);
    },
    
    updateActionAttempts: async (actionId: string, attempts: number) => {
      // Aktualizovat lok√°ln√≠ stav
    set(state => ({
        queue: state.queue.map(action => 
          action.id === actionId 
            ? { ...action, attempts }
            : action
        )
      }));
      
      // Aktualizovat v IndexedDB - opraven√© n√°zvy metod
      const action = get().queue.find(a => a.id === actionId);
      if (action) {
        const updatedAction = { ...action, attempts };
        await storageService.updateAction(updatedAction);
      }
      
        console.log('üîÑ Poƒçet pokus≈Ø aktualizov√°n:', { akce: actionId, pokusy: `${attempts}/${action?.maxAttempts || 3}` });
    },
    
    loadQueue: async () => {
      try {
        const queuedActions = await storageService.loadActions();
        set({ queue: queuedActions, isLoaded: true });
        console.log('üì• Fronta naƒçtena z IndexedDB:', queuedActions.length, 'isLoaded nastaveno na true');
      } catch (error) {
        console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ fronty:', error);
        set({ isLoaded: true });
    }
  },
  
    getFailedActions: (): QueuedAction[] => {
    return get().queue.filter(action => action.attempts >= action.maxAttempts);
  },
  
  clearQueue: async () => {
      try {
        const { queue } = get();
        
        // Smazat v≈°echny akce z IndexedDB - opraven√© n√°zvy metod
        for (const action of queue) {
          await storageService.removeAction(action.id);
        }
        
        // Vyƒçistit lok√°ln√≠ stav a processing lock
        set({ queue: [], isProcessing: false });
        
        console.log('üóëÔ∏è Fronta vyƒçi≈°tƒõna');
      } catch (error) {
        console.error('‚ùå Chyba p≈ôi ƒçi≈°tƒõn√≠ fronty:', error);
      }
    }
  }))
);