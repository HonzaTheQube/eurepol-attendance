import { useEffect, useState } from 'react';
import { Play, Square, User, ArrowLeft } from 'lucide-react';
import { useAppStore } from '../store';
import { appConfig } from '../services/config';

export function EmployeeActionScreen() {
  const { 
    selectedEmployee, 
    setCurrentScreen, 
    setSelectedEmployee,
    getEmployeeState,
    activities,
    localEmployees,
    startWork,
    stopWork
  } = useAppStore();

  const [currentTime, setCurrentTime] = useState(new Date());
  const [countdown, setCountdown] = useState(Math.floor(appConfig.ui.autoReturnToWelcomeMs / 1000));

  // Aktualizace ƒçasu ka≈ædou minutu pro real-time odpracovan√© hodiny
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000); // Ka≈ædou minutu

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    // Automatick√Ω n√°vrat na welcome screen pokud nen√≠ vybr√°n zamƒõstnanec
    if (!selectedEmployee) {
      setCurrentScreen('welcome');
    }
  }, [selectedEmployee, setCurrentScreen]);

  useEffect(() => {
    // Auto-return timer (po urƒçit√© dobƒõ neƒçinnosti)
    const timer = setTimeout(() => {
      handleBack();
    }, appConfig.ui.autoReturnToWelcomeMs);

    return () => clearTimeout(timer);
  }, []);

  // Countdown timer pro vizu√°ln√≠ indik√°tor
  useEffect(() => {
    const countdownInterval = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(countdownInterval);
  }, []);

  const handleBack = () => {
    setSelectedEmployee(undefined);
    setCurrentScreen('welcome');
  };

  const handleAction = async () => {
    if (!selectedEmployee) return;

    console.log('üéØ Akce spu≈°tƒõna - zamƒõstnanec:', selectedEmployee.fullName);

    // START akce - v≈ædy stejn√°
    if (!selectedEmployee.isAtWork) {
      console.log('üü¢ START akce - okam≈æit√Ω p≈ôechod na confirmation');
      startWork(selectedEmployee.employeeID); // Bez await - async na pozad√≠
      
      // Okam≈æitƒõ p≈ôej√≠t na confirmation (neblokuje se na API)
      setCurrentScreen('confirmation');

      // Po zobrazen√≠ potvrzen√≠ se vr√°t√≠ na welcome
      setTimeout(() => {
        setCurrentScreen('welcome');
        setSelectedEmployee(undefined);
      }, appConfig.ui.confirmationDurationMs);
      return;
    }

    // STOP akce - kontrola reportActivity
    const employeeState = getEmployeeState(selectedEmployee.employeeID);
    
    if (employeeState?.reportActivity) {
      console.log('üìã Zamƒõstnanec m√° reportActivity - p≈ôechod na activity-confirmation');
      setCurrentScreen('activity-confirmation');
    } else {
      console.log('üî¥ Norm√°ln√≠ STOP bez reportActivity');
      stopWork(selectedEmployee.employeeID); // Bez await - async na pozad√≠
      
      // Okam≈æitƒõ p≈ôej√≠t na confirmation (neblokuje se na API)
      setCurrentScreen('confirmation');

      // Po zobrazen√≠ potvrzen√≠ se vr√°t√≠ na welcome
      setTimeout(() => {
        setCurrentScreen('welcome');
        setSelectedEmployee(undefined);
      }, appConfig.ui.confirmationDurationMs);
    }
  };

  // Pokud nen√≠ vybr√°n zamƒõstnanec, je to chyba - mƒõl by b√Ωt v≈ædy naƒçten p≈ôed p≈ôechodem na tento screen
  if (!selectedEmployee) {
    console.error('‚ùå EmployeeActionScreen: ≈Ω√°dn√Ω zamƒõstnanec nen√≠ vybr√°n!');
    setCurrentScreen('welcome');
    return null;
  }

  const isAtWork = selectedEmployee.isAtWork;
  const actionText = isAtWork ? 'Ukonƒçit pr√°ci' : 'Zaƒç√≠t pr√°ci';
  const actionIcon = isAtWork ? Square : Play;
  const ActionIcon = actionIcon;

  // V√Ωpoƒçet odpracovan√Ωch hodin (real-time)
  const calculateWorkedHours = () => {
    if (!selectedEmployee.attendanceStart) return null;
    
    const startTime = new Date(selectedEmployee.attendanceStart);
    const diffMs = currentTime.getTime() - startTime.getTime();
    
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    return { hours, minutes };
  };

  const formatWorkStartTime = (attendanceStart: string) => {
    return new Date(attendanceStart).toLocaleTimeString('cs-CZ', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const workedTime = calculateWorkedHours();


  return (
    <div className="h-screen flex flex-col overflow-hidden px-6 py-4 relative">

      {/* Zpƒõt tlaƒç√≠tko */}
      <button
        onClick={handleBack}
        className="absolute top-4 left-4 p-3 text-slate-300 hover:text-slate-100 hover:bg-slate-600/30 rounded-full transition-all duration-200 backdrop-blur-sm z-20"
        aria-label="Zpƒõt"
      >
        <ArrowLeft className="w-6 h-6" />
      </button>

      {/* St≈ôedn√≠ sekce - zamƒõstnanec vycentrovan√Ω */}
      <div className="flex-1 flex flex-col items-center justify-center relative z-10 py-8">
        
        {/* Informace o zamƒõstnanci - vycentrovan√© */}
        <div className="glass-card p-8 text-center max-w-3xl w-full mb-8">
          <div className="flex items-center justify-center gap-8">
            {/* Avatar - vƒõt≈°√≠ */}
            <div className="w-20 h-20 bg-slate-600/30 rounded-full flex items-center justify-center backdrop-blur-sm border border-slate-400/20">
              <User className="w-10 h-10 text-slate-300" />
            </div>

            {/* Jm√©no a stav */}
            <div className="flex-1 text-left">
              <h2 className="text-3xl font-bold text-slate-100 mb-3">
                {selectedEmployee.fullName || 'Nezn√°m√Ω zamƒõstnanec'}
              </h2>
              
              {/* Aktu√°ln√≠ stav - detailn√≠ informace p≈ôi pr√°ci */}
              {isAtWork && selectedEmployee.attendanceStart ? (
                <div className="flex flex-wrap gap-4 items-center">
                  {/* ƒåas p≈ô√≠chodu */}
                  <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold bg-blue-500/15 text-blue-300 border border-blue-400/20">
                    <div className="w-2 h-2 rounded-full bg-blue-400"></div>
                    P≈ô√≠chod: {formatWorkStartTime(selectedEmployee.attendanceStart)}
                  </div>
                  
                  {/* Odpracovan√© hodiny */}
                  {workedTime && (
                    <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold bg-emerald-500/15 text-emerald-300 border border-emerald-400/20">
                      <div className="w-2 h-2 rounded-full bg-emerald-400"></div>
                      Odpracov√°no: {workedTime.hours}h {workedTime.minutes}m
                    </div>
                  )}
                </div>
              ) : !isAtWork ? (
                <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold bg-slate-600/20 text-slate-400 border border-slate-500/20">
                  <div className="w-2 h-2 rounded-full bg-slate-500"></div>
                  {/* Pr√°zdn√Ω text pro voln√Ω stav */}
                </div>
              ) : null}
            </div>
          </div>
        </div>

        {/* Akƒçn√≠ tlaƒç√≠tko - vycentrovan√© */}
        <button
          onClick={handleAction}
          className={`
            relative w-full max-w-3xl mx-auto flex items-center justify-center gap-4 p-8 text-2xl font-bold rounded-2xl transition-all duration-300 min-h-[100px] hover:scale-105 active:scale-95
            ${isAtWork 
              ? 'btn-warning' 
              : 'btn-success'
            }
          `}
          aria-label={actionText}
        >
          <ActionIcon className="w-10 h-10" />
          {actionText}
        </button>

        {/* Countdown indik√°tor - kompaktn√≠ */}
        <div className="mt-8">
          <div className="inline-block bg-slate-800/60 backdrop-blur-sm border border-slate-600/30 rounded-lg px-4 py-2 mx-auto">
            <p className="text-slate-300 text-sm whitespace-nowrap">
              N√°vrat na hlavn√≠ obrazovku za {countdown}s
            </p>
          </div>
        </div>
      </div>

    </div>
  );
}
